[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

const vec3 DIM[4] = vec3[](vec3(0.529, 0.207, 0.333), vec3(0.48, 0.33, 0.50), vec3(0.43, 0.50, 0.98), vec3(0.31, 0.09, 0.49));
const vec3 MAIN[4] = vec3[](vec3(0.650, 0.333, 0.372), vec3(0.65, 0.52, 0.62), vec3(0.55, 0.72, 1.00), vec3(0.49, 0.18, 0.63));
const vec3 BRIGHT[4] = vec3[](vec3(0.788, 0.450, 0.450), vec3(0.85, 0.74, 0.78), vec3(0.68, 0.89, 1.00), vec3(0.52, 0.40, 0.93));

uniform float challange = 0.0;
uniform vec2 direction = vec2(0, 1);
uniform vec4 shadow_color : hint_color = vec4(0.0, 0.0, 0.0, 1.0);
uniform float shadow_strength : hint_range(0.0,1.0) = 1.0;

uniform vec4 tint_color : hint_color = vec4(0.0, 0.0, 0.0, 1.0);
uniform float tint_strength : hint_range(0.0,1.0) = 0.0;

varying vec2 world_direction;

vec2 rotate(vec2 vector, float angle) {
	float sin_angle = sin(angle);
	float cos_angle = cos(angle);
	return vec2((cos_angle * vector.x) - (sin_angle * vector.y), (sin_angle * vector.x) + (cos_angle * vector.y));
}

void vertex() {
	float rotation = atan(WORLD_MATRIX[0].y, WORLD_MATRIX[0].x);
	world_direction = rotate(direction, -rotation);
}

void fragment() {
	vec4 color = texture(TEXTURE, UV);
	vec4 shadow = texture(TEXTURE, UV + (world_direction * TEXTURE_PIXEL_SIZE));
	
	int chal_max = int(ceil(challange));
	int chal_min = int(floor(challange));
	float chal_t = challange - floor(challange);
	
	if (color.r == 1.0) {
		color.rgb = mix(DIM[chal_min], DIM[chal_max], chal_t);
	} else if (color.g == 1.0) {
		color.rgb = mix(BRIGHT[chal_min], BRIGHT[chal_max], chal_t);
	} else {
		color.rgb = mix(MAIN[chal_min], MAIN[chal_max], chal_t);
	}
	
	if (shadow.r == 1.0) {
		shadow.rgb = mix(DIM[chal_min], DIM[chal_max], chal_t);
	} else if (shadow.g == 1.0) {
		shadow.rgb = mix(BRIGHT[chal_min], BRIGHT[chal_max], chal_t);
	} else {
		shadow.rgb = mix(MAIN[chal_min], MAIN[chal_max], chal_t);
	}
	
	if (color.a != 0.0) {
		color = mix(color, tint_color, tint_strength);
	}
	
	if (shadow.a != 0.0) {
		shadow = mix(shadow, tint_color, tint_strength);
	}
	
	if (color.a == 0.0 && shadow.a != 0.0 && UV.x + (world_direction.x * TEXTURE_PIXEL_SIZE.x) < 1.0 - (world_direction.x * TEXTURE_PIXEL_SIZE.x)) {
		COLOR = mix(shadow, shadow_color, shadow_strength);
	} else {
		COLOR = color;
	}
}"
